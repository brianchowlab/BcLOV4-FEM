function [] = SolveNonLinear(param,solver_params)
    u_h = zeros(2*CN + 2*MN,1);

    %Dark, cytosolic state initial condition
    u_h((CN+1):2*CN) = conc*ones(CN,1);

    %u_h(1:CN) = conc*ones(CN,1);


    u_h(2*CN+MN+1:end,:) = conc/(k_off_d/k_on_d+conc) * S * ones(MN,1);%k_on_d * 3000/k_off_d*ones(MN,1);
    %u_h(2*CN+1:2*CN+MN,:) = conc/(k_off_d/k_on_d+conc) * S * ones(MN,1);%k_on_d * 3000/k_off_d*ones(MN,1);

    %Fetch initial FEM matrices
    FEM_l = mex_ReactionDiffusion_Cell_l_assemble(solver_params.FEM,solver_params.p,solver_params.c,...
        [],solver_params.embed,solver_params.C_DoF,solver_params.M_DoF);
    FEM_nl = mex_ReactionDiffusion_Cell_nl_assemble(solver_params.FEM,solver_params.p,solver_params.c,[],...
            solver_params.embed,solver_params.C_DoF,solver_params.M_DoF,solver_params.u_M,solver_params.v_M);
        
    [K_phi,K_psi,K_phi_phi,K_phi_psi,K_psi_phi,A_phi,A_psi]=FetchMatrices_linear(solver_params);
    [B_phi,B_psi]=FetchMatrices_nonlinear(solver_params);
    
    k_on_p_store = param.k_on_p;

    %Assign some variables fo easier access
    il_phi = K_phi.*sparse(param.il_c);
    il_psi = K_psi.*sparse(param.il_m);
    u_C_1 = @(theta)K_phi/(partheta*dt)+D*A_phi+sparse(k_off_p)*K_phi+k_on_l*S*K_phi_phi;
    u_C_2 = -k_on_p*il_phi;
    u_C_3 = -k_off_l*K_psi_phi;
    u_C_4 = sparse(CN,MN);
    v_C_1 = -k_off_p*K_phi;
    v_C_2 = @(theta) K_phi/(theta*dt)+D*A_phi+k_on_p*il_phi+k_on_d*S*K_phi_phi;
    v_C_3 = sparse(CN,MN);
    v_C_4 = -k_off_d*K_psi_phi;
    u_M_1 = -k_on_l*S*K_phi_psi;
    u_M_2 = sparse(MN,CN);
    u_M_3 = @(theta) K_psi/(theta*dt)+D_m*A_psi+k_off_p*K_psi+k_off_l*K_psi;
    u_M_4 = -k_on_p*il_psi;
    v_M_1 = sparse(MN,CN);
    v_M_2 = -k_on_d*S*K_phi_psi;
    v_M_3 = -k_off_p*K_psi;
    v_M_4 = @(theta) K_psi/(theta*dt)+D_m*A_psi+k_on_p*il_psi+k_off_d*K_psi;

    u_C_nl_1 = k_on_l*B_phi;
    v_C_n1_2 = k_on_d*B_phi;
    u_M_nl_1 = -k_on_l*B_psi;
    v_M_nl_2 = -k_on_d*B_psi;

    %Step 1
    Step_1_LHS_lit = [u_C_1(theta),u_C_2,u_C_3,u_C_4;v_C_1,v_C_2(theta),v_C_3,v_C_4;u_M_1,u_M_2,u_M_3(theta),u_M_4;v_M_1,v_M_2,v_M_3,v_M_4(theta)];
    Step_1_LHS_decomp_lit = decomposition(Step_1_LHS_lit);

    %Assign some variables for easier access
    u_C_2 = 0*il_phi;
    v_C_2 = @(theta) K_phi/(theta*dt)+D*A_phi+k_on_d*S*K_phi_phi;
    u_M_4 = 0*il_psi;
    v_M_4 = @(theta) K_psi/(theta*dt)+D_m*A_psi+k_off_d*K_psi;

    %Step 1
    Step_1_LHS_dark = [u_C_1(theta),u_C_2,u_C_3,u_C_4;v_C_1,v_C_2(theta),v_C_3,v_C_4;u_M_1,u_M_2,u_M_3(theta),u_M_4;v_M_1,v_M_2,v_M_3,v_M_4(theta)];
    Step_1_LHS_decomp_dark = decomposition(Step_1_LHS_dark);

    %Time discretisation via the fractional-step theta method

    Soln = zeros(2*MN + 2*CN,1+num_steps/store_interval);
    Soln(:,1) = u_h;