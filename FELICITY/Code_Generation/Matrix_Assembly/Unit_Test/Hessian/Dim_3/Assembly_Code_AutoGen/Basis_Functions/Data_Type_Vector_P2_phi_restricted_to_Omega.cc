/*
============================================================================================
   This class contains data about a given FE function space, and methods for computing
   transformations of the local basis functions.

   This code references the header files:

   matrix_vector_defn.h
   matrix_vector_ops.h
   geometric_computations.h
   basis_function_computations.h


   NOTE: portions of this code are automatically generated!

   Copyright (c) 01-15-2018,  Shawn W. Walker
============================================================================================
*/

/*------------ BEGIN: Auto Generate ------------*/
// define the name of the FE basis function (should be the same as the filename of this file)
#define SpecificFUNC        Data_Type_Vector_P2_phi_restricted_to_Omega
#define SpecificFUNC_str   "Data_Type_Vector_P2_phi_restricted_to_Omega"

// set the type of function space
#define SPACE_type  "CG - lagrange_deg2_dim3"
// set the name of function space
#define SPACE_name  "Vector_P2"

// set the Subdomain topological dimension
#define SUB_TD  3
// set the Domain of Integration (DoI) topological dimension
#define DOI_TD  3
// set the geometric dimension
#define GD  3
// set the number of cartesian tuple components (m*n) = 3 * 1
#define NC  3
// NOTE: the (i,j) tuple component is accessed by the linear index k = i + (j-1)*m
// set the number of quad points
#define NQ  10
// set the number of basis functions
#define NB  10
/*------------   END: Auto Generate ------------*/

/* C++ (Specific) FE Function class definition */
class SpecificFUNC: public ABSTRACT_FEM_Function_Class // derive from base class
{
public:
    int*     Elem_DoF[NB];    // element DoF list

    // data structure containing information on the function evaluations.
    // Note: this data is evaluated at several quadrature points!
    // local function evaluated at a quadrature point in reference element
    // (this is a pointer because it will change depending on the local mesh entity)
    SCALAR  (*Func_f_Value)[NB][NQ];
    // hessian of basis function
    MAT_3x3 Func_f_Hess[NB][NQ];

    // constructor
    SpecificFUNC ();
    ~SpecificFUNC (); // destructor
    void Setup_Function_Space(const mxArray*);
    void Get_Local_to_Global_DoFmap(const int&, int*) const;
                   // need the "const" to ENSURE that nothing in this object will change!
    void Transform_Basis_Functions();
    const CLASS_geom_Omega_embedded_in_Omega_restricted_to_Omega*  Mesh;

private:
    void Map_Basis_p1();
    SCALAR Value_p1[NB][NQ];
    void Basis_Value_p1(SCALAR V[NB][NQ]);
};

/*------------ BEGIN: Auto Generate ------------*/
/***************************************************************************************/
/* constructor */
SpecificFUNC::SpecificFUNC () :
ABSTRACT_FEM_Function_Class () // call the base class constructor
{
    Name       = (char*) SpecificFUNC_str;
    Type       = (char*) SPACE_type;
    Space_Name = (char*) SPACE_name;
    Sub_TopDim = SUB_TD;
    DoI_TopDim = DOI_TD;
    GeoDim     = GD;
    Num_Basis  = NB;
    Num_Comp   = NC;
    Num_QP     = NQ;
    Mesh       = NULL;

    // init DoF information to NULL
    for (int basis_i = 0; (basis_i < Num_Basis); basis_i++)
        Elem_DoF[basis_i] = NULL;

    // init everything to zero
    for (int qp_i = 0; (qp_i < Num_QP); qp_i++)
    for (int basis_i = 0; (basis_i < Num_Basis); basis_i++)
        Func_f_Hess[basis_i][qp_i].Set_To_Zero();
    // init basis function values on local mesh entities
    Basis_Value_p1(Value_p1);
}
/***************************************************************************************/
/*------------   END: Auto Generate ------------*/


/***************************************************************************************/
/* DE-structor */
SpecificFUNC::~SpecificFUNC ()
{
}
/***************************************************************************************/


/***************************************************************************************/
/* put incoming function data from MATLAB into a nice struct  */
void SpecificFUNC::Setup_Function_Space(const mxArray* Elem)          // inputs
{
    Init_Function_Space(Elem);

    // split up the columns of the element data
    Elem_DoF[0] = (int *) mxGetPr(Elem);
    for (int basis_i = 1; (basis_i < Num_Basis); basis_i++)
        Elem_DoF[basis_i] = Elem_DoF[basis_i-1] + Num_Elem;
}
/***************************************************************************************/


/***************************************************************************************/
/* get the local DoFs on the given element.
   Note: elem_index is in the   C-style (i.e. 0 <= elem_index <= Num_Elem - 1),
         Indices is in the MATLAB-style (i.e. 1 <= Indices[:] <= max(Elem_DoF)). */
void SpecificFUNC::Get_Local_to_Global_DoFmap(const int& elem_index, int* Indices) const  // inputs
{
    /* error check: */
    if (elem_index < 0)
        {
        mexPrintf("ERROR: Given element index #%d is not positive. It must be > 0!\n",elem_index+1);
        mexPrintf("ERROR: There is an issue with the Finite Element Space = %s!\n",Space_Name);
        mexErrMsgTxt("ERROR: Make sure your inputs are valid!");
        }
    else if (elem_index >= Num_Elem)
        {
        mexPrintf("ERROR: Given element index #%d exceeds the number of elements in the finite element (FE) space.\n",elem_index+1);
		mexPrintf("It must be <= %d!  OR  Your FE space DoFmap is not defined correctly!\n",Num_Elem);
		mexPrintf("   For example, the number of rows in DoFmap should *equal*\n");
		mexPrintf("       the number of mesh elements in the (sub)-domain.\n");
        mexPrintf("ERROR: There is an issue with the Finite Element Space = %s!\n",Space_Name);
        mexErrMsgTxt("ERROR: Make sure your inputs are valid!");
        }

    // get local to global index map for the current element
    for (int basis_i = 0; (basis_i < Num_Basis); basis_i++)
        {
        int DoF_index = Elem_DoF[basis_i][elem_index] - 1; // shifted for C - style indexing
        Indices[basis_i] = DoF_index;
        }
}
/***************************************************************************************/

/*------------ BEGIN: Auto Generate ------------*/
/***************************************************************************************/
/* compute the correct local transformation */
void SpecificFUNC::Transform_Basis_Functions()
{
    Map_Basis_p1();
}
/***************************************************************************************/
/*------------   END: Auto Generate ------------*/


/*------------ BEGIN: Auto Generate ------------*/
/***************************************************************************************/
/* map basis functions from the standard reference element
       to an actual element in the Domain.     */
void SpecificFUNC::Map_Basis_p1()
{

/*------------ BEGIN: Auto Generate ------------*/
// Local Element defined on Subdomain: CG, lagrange_deg2_dim3
// the Subdomain             has topological dimension = 3
// the Domain of Integration has topological dimension = 3
// geometric dimension = 3
// Number of Quadrature Points = 10

    // get "Grad" of basis functions
    VEC_3x1 phi_Grad[NQ][NB];
    // get "Hess" of basis functions
    MAT_3x3 phi_Hess[NQ][NB];

    phi_Grad[0][0].Set_Equal_To(4.24574112262459336E-01, 4.24574112262459336E-01, 4.24574112262459336E-01);
    phi_Grad[0][1].Set_Equal_To(1.27372233678737778E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[0][2].Set_Equal_To(0.00000000000000000E+00, -4.24574112262459225E-01, 0.00000000000000000E+00);
    phi_Grad[0][3].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, -4.24574112262459225E-01);
    phi_Grad[0][4].Set_Equal_To(-1.69829644904983712E+00, -2.27372233678737778E+00, -2.27372233678737778E+00);
    phi_Grad[0][5].Set_Equal_To(-5.75425887737540775E-01, -1.11022302462515654E-16, -5.75425887737540775E-01);
    phi_Grad[0][6].Set_Equal_To(-5.75425887737540775E-01, -5.75425887737540775E-01, -1.11022302462515654E-16);
    phi_Grad[0][7].Set_Equal_To(5.75425887737540775E-01, 2.27372233678737778E+00, 0.00000000000000000E+00);
    phi_Grad[0][8].Set_Equal_To(0.00000000000000000E+00, 5.75425887737540775E-01, 5.75425887737540775E-01);
    phi_Grad[0][9].Set_Equal_To(5.75425887737540775E-01, 0.00000000000000000E+00, 2.27372233678737778E+00);
    phi_Grad[1][0].Set_Equal_To(-1.27372233678737778E+00, -1.27372233678737778E+00, -1.27372233678737778E+00);
    phi_Grad[1][1].Set_Equal_To(-4.24574112262459225E-01, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[1][2].Set_Equal_To(0.00000000000000000E+00, -4.24574112262459225E-01, 0.00000000000000000E+00);
    phi_Grad[1][3].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, -4.24574112262459225E-01);
    phi_Grad[1][4].Set_Equal_To(1.69829644904983690E+00, -5.75425887737540775E-01, -5.75425887737540775E-01);
    phi_Grad[1][5].Set_Equal_To(-5.75425887737540775E-01, 1.69829644904983690E+00, -5.75425887737540775E-01);
    phi_Grad[1][6].Set_Equal_To(-5.75425887737540775E-01, -5.75425887737540775E-01, 1.69829644904983690E+00);
    phi_Grad[1][7].Set_Equal_To(5.75425887737540775E-01, 5.75425887737540775E-01, 0.00000000000000000E+00);
    phi_Grad[1][8].Set_Equal_To(0.00000000000000000E+00, 5.75425887737540775E-01, 5.75425887737540775E-01);
    phi_Grad[1][9].Set_Equal_To(5.75425887737540775E-01, 0.00000000000000000E+00, 5.75425887737540775E-01);
    phi_Grad[2][0].Set_Equal_To(4.24574112262459336E-01, 4.24574112262459336E-01, 4.24574112262459336E-01);
    phi_Grad[2][1].Set_Equal_To(-4.24574112262459225E-01, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[2][2].Set_Equal_To(0.00000000000000000E+00, -4.24574112262459225E-01, 0.00000000000000000E+00);
    phi_Grad[2][3].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 1.27372233678737778E+00);
    phi_Grad[2][4].Set_Equal_To(-1.11022302462515654E-16, -5.75425887737540775E-01, -5.75425887737540775E-01);
    phi_Grad[2][5].Set_Equal_To(-5.75425887737540775E-01, -1.11022302462515654E-16, -5.75425887737540775E-01);
    phi_Grad[2][6].Set_Equal_To(-2.27372233678737778E+00, -2.27372233678737778E+00, -1.69829644904983712E+00);
    phi_Grad[2][7].Set_Equal_To(5.75425887737540775E-01, 5.75425887737540775E-01, 0.00000000000000000E+00);
    phi_Grad[2][8].Set_Equal_To(0.00000000000000000E+00, 2.27372233678737778E+00, 5.75425887737540775E-01);
    phi_Grad[2][9].Set_Equal_To(2.27372233678737778E+00, 0.00000000000000000E+00, 5.75425887737540775E-01);
    phi_Grad[3][0].Set_Equal_To(4.24574112262459336E-01, 4.24574112262459336E-01, 4.24574112262459336E-01);
    phi_Grad[3][1].Set_Equal_To(-4.24574112262459225E-01, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[3][2].Set_Equal_To(0.00000000000000000E+00, 1.27372233678737778E+00, 0.00000000000000000E+00);
    phi_Grad[3][3].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, -4.24574112262459225E-01);
    phi_Grad[3][4].Set_Equal_To(-1.11022302462515654E-16, -5.75425887737540775E-01, -5.75425887737540775E-01);
    phi_Grad[3][5].Set_Equal_To(-2.27372233678737778E+00, -1.69829644904983712E+00, -2.27372233678737778E+00);
    phi_Grad[3][6].Set_Equal_To(-5.75425887737540775E-01, -5.75425887737540775E-01, -1.11022302462515654E-16);
    phi_Grad[3][7].Set_Equal_To(2.27372233678737778E+00, 5.75425887737540775E-01, 0.00000000000000000E+00);
    phi_Grad[3][8].Set_Equal_To(0.00000000000000000E+00, 5.75425887737540775E-01, 2.27372233678737778E+00);
    phi_Grad[3][9].Set_Equal_To(5.75425887737540775E-01, 0.00000000000000000E+00, 5.75425887737540775E-01);
    phi_Grad[4][0].Set_Equal_To(1.00000000000000000E+00, 1.00000000000000000E+00, 1.00000000000000000E+00);
    phi_Grad[4][1].Set_Equal_To(-1.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[4][2].Set_Equal_To(0.00000000000000000E+00, 1.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[4][3].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 1.00000000000000000E+00);
    phi_Grad[4][4].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[4][5].Set_Equal_To(-2.00000000000000000E+00, -2.00000000000000000E+00, -2.00000000000000000E+00);
    phi_Grad[4][6].Set_Equal_To(-2.00000000000000000E+00, -2.00000000000000000E+00, -2.00000000000000000E+00);
    phi_Grad[4][7].Set_Equal_To(2.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[4][8].Set_Equal_To(0.00000000000000000E+00, 2.00000000000000000E+00, 2.00000000000000000E+00);
    phi_Grad[4][9].Set_Equal_To(2.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[5][0].Set_Equal_To(1.00000000000000000E+00, 1.00000000000000000E+00, 1.00000000000000000E+00);
    phi_Grad[5][1].Set_Equal_To(1.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[5][2].Set_Equal_To(0.00000000000000000E+00, -1.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[5][3].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 1.00000000000000000E+00);
    phi_Grad[5][4].Set_Equal_To(-2.00000000000000000E+00, -2.00000000000000000E+00, -2.00000000000000000E+00);
    phi_Grad[5][5].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[5][6].Set_Equal_To(-2.00000000000000000E+00, -2.00000000000000000E+00, -2.00000000000000000E+00);
    phi_Grad[5][7].Set_Equal_To(0.00000000000000000E+00, 2.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[5][8].Set_Equal_To(0.00000000000000000E+00, 2.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[5][9].Set_Equal_To(2.00000000000000000E+00, 0.00000000000000000E+00, 2.00000000000000000E+00);
    phi_Grad[6][0].Set_Equal_To(1.00000000000000000E+00, 1.00000000000000000E+00, 1.00000000000000000E+00);
    phi_Grad[6][1].Set_Equal_To(1.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[6][2].Set_Equal_To(0.00000000000000000E+00, 1.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[6][3].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, -1.00000000000000000E+00);
    phi_Grad[6][4].Set_Equal_To(-2.00000000000000000E+00, -2.00000000000000000E+00, -2.00000000000000000E+00);
    phi_Grad[6][5].Set_Equal_To(-2.00000000000000000E+00, -2.00000000000000000E+00, -2.00000000000000000E+00);
    phi_Grad[6][6].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[6][7].Set_Equal_To(2.00000000000000000E+00, 2.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[6][8].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 2.00000000000000000E+00);
    phi_Grad[6][9].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 2.00000000000000000E+00);
    phi_Grad[7][0].Set_Equal_To(-1.00000000000000000E+00, -1.00000000000000000E+00, -1.00000000000000000E+00);
    phi_Grad[7][1].Set_Equal_To(1.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[7][2].Set_Equal_To(0.00000000000000000E+00, -1.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[7][3].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, -1.00000000000000000E+00);
    phi_Grad[7][4].Set_Equal_To(0.00000000000000000E+00, -2.00000000000000000E+00, -2.00000000000000000E+00);
    phi_Grad[7][5].Set_Equal_To(0.00000000000000000E+00, 2.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[7][6].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 2.00000000000000000E+00);
    phi_Grad[7][7].Set_Equal_To(0.00000000000000000E+00, 2.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[7][8].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[7][9].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 2.00000000000000000E+00);
    phi_Grad[8][0].Set_Equal_To(-1.00000000000000000E+00, -1.00000000000000000E+00, -1.00000000000000000E+00);
    phi_Grad[8][1].Set_Equal_To(-1.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[8][2].Set_Equal_To(0.00000000000000000E+00, 1.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[8][3].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, -1.00000000000000000E+00);
    phi_Grad[8][4].Set_Equal_To(2.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[8][5].Set_Equal_To(-2.00000000000000000E+00, 0.00000000000000000E+00, -2.00000000000000000E+00);
    phi_Grad[8][6].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 2.00000000000000000E+00);
    phi_Grad[8][7].Set_Equal_To(2.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[8][8].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 2.00000000000000000E+00);
    phi_Grad[8][9].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[9][0].Set_Equal_To(-1.00000000000000000E+00, -1.00000000000000000E+00, -1.00000000000000000E+00);
    phi_Grad[9][1].Set_Equal_To(-1.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[9][2].Set_Equal_To(0.00000000000000000E+00, -1.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[9][3].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 1.00000000000000000E+00);
    phi_Grad[9][4].Set_Equal_To(2.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[9][5].Set_Equal_To(0.00000000000000000E+00, 2.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[9][6].Set_Equal_To(-2.00000000000000000E+00, -2.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[9][7].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[9][8].Set_Equal_To(0.00000000000000000E+00, 2.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Grad[9][9].Set_Equal_To(2.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);

    phi_Hess[0][0].Set_Equal_To(4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00);
    phi_Hess[0][1].Set_Equal_To(4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[0][2].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[0][3].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00);
    phi_Hess[0][4].Set_Equal_To(-8.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[0][5].Set_Equal_To(0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, -8.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[0][6].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, -8.00000000000000000E+00);
    phi_Hess[0][7].Set_Equal_To(0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[0][8].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[0][9].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[1][0].Set_Equal_To(4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00);
    phi_Hess[1][1].Set_Equal_To(4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[1][2].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[1][3].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00);
    phi_Hess[1][4].Set_Equal_To(-8.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[1][5].Set_Equal_To(0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, -8.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[1][6].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, -8.00000000000000000E+00);
    phi_Hess[1][7].Set_Equal_To(0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[1][8].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[1][9].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[2][0].Set_Equal_To(4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00);
    phi_Hess[2][1].Set_Equal_To(4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[2][2].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[2][3].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00);
    phi_Hess[2][4].Set_Equal_To(-8.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[2][5].Set_Equal_To(0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, -8.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[2][6].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, -8.00000000000000000E+00);
    phi_Hess[2][7].Set_Equal_To(0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[2][8].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[2][9].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[3][0].Set_Equal_To(4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00);
    phi_Hess[3][1].Set_Equal_To(4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[3][2].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[3][3].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00);
    phi_Hess[3][4].Set_Equal_To(-8.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[3][5].Set_Equal_To(0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, -8.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[3][6].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, -8.00000000000000000E+00);
    phi_Hess[3][7].Set_Equal_To(0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[3][8].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[3][9].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[4][0].Set_Equal_To(4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00);
    phi_Hess[4][1].Set_Equal_To(4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[4][2].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[4][3].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00);
    phi_Hess[4][4].Set_Equal_To(-8.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[4][5].Set_Equal_To(0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, -8.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[4][6].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, -8.00000000000000000E+00);
    phi_Hess[4][7].Set_Equal_To(0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[4][8].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[4][9].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[5][0].Set_Equal_To(4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00);
    phi_Hess[5][1].Set_Equal_To(4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[5][2].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[5][3].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00);
    phi_Hess[5][4].Set_Equal_To(-8.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[5][5].Set_Equal_To(0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, -8.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[5][6].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, -8.00000000000000000E+00);
    phi_Hess[5][7].Set_Equal_To(0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[5][8].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[5][9].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[6][0].Set_Equal_To(4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00);
    phi_Hess[6][1].Set_Equal_To(4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[6][2].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[6][3].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00);
    phi_Hess[6][4].Set_Equal_To(-8.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[6][5].Set_Equal_To(0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, -8.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[6][6].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, -8.00000000000000000E+00);
    phi_Hess[6][7].Set_Equal_To(0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[6][8].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[6][9].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[7][0].Set_Equal_To(4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00);
    phi_Hess[7][1].Set_Equal_To(4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[7][2].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[7][3].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00);
    phi_Hess[7][4].Set_Equal_To(-8.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[7][5].Set_Equal_To(0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, -8.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[7][6].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, -8.00000000000000000E+00);
    phi_Hess[7][7].Set_Equal_To(0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[7][8].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[7][9].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[8][0].Set_Equal_To(4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00);
    phi_Hess[8][1].Set_Equal_To(4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[8][2].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[8][3].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00);
    phi_Hess[8][4].Set_Equal_To(-8.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[8][5].Set_Equal_To(0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, -8.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[8][6].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, -8.00000000000000000E+00);
    phi_Hess[8][7].Set_Equal_To(0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[8][8].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[8][9].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[9][0].Set_Equal_To(4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00, 4.00000000000000000E+00);
    phi_Hess[9][1].Set_Equal_To(4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[9][2].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[9][3].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00);
    phi_Hess[9][4].Set_Equal_To(-8.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[9][5].Set_Equal_To(0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, -8.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[9][6].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, -4.00000000000000000E+00, -8.00000000000000000E+00);
    phi_Hess[9][7].Set_Equal_To(0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[9][8].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00);
    phi_Hess[9][9].Set_Equal_To(0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00, 4.00000000000000000E+00, 0.00000000000000000E+00, 0.00000000000000000E+00);


// // set of quadrature points
// static const double Quad_Points[NQ][SUB_TD] = { \
//     {5.68430584196844446E-01, 1.43856471934385194E-01, 1.43856471934385194E-01}, \
//     {1.43856471934385194E-01, 1.43856471934385194E-01, 1.43856471934385194E-01}, \
//     {1.43856471934385194E-01, 1.43856471934385194E-01, 5.68430584196844446E-01}, \
//     {1.43856471934385194E-01, 5.68430584196844446E-01, 1.43856471934385194E-01}, \
//     {0.00000000000000000E+00, 5.00000000000000000E-01, 5.00000000000000000E-01}, \
//     {5.00000000000000000E-01, 0.00000000000000000E+00, 5.00000000000000000E-01}, \
//     {5.00000000000000000E-01, 5.00000000000000000E-01, 0.00000000000000000E+00}, \
//     {5.00000000000000000E-01, 0.00000000000000000E+00, 0.00000000000000000E+00}, \
//     {0.00000000000000000E+00, 5.00000000000000000E-01, 0.00000000000000000E+00}, \
//     {0.00000000000000000E+00, 0.00000000000000000E+00, 5.00000000000000000E-01}  \
//     };

// // set of quadrature weights
// static const double Quad_Weights[NQ] = { \
//     3.62941783134008988E-02, \
//     3.62941783134008988E-02, \
//     3.62941783134008988E-02, \
//     3.62941783134008988E-02, \
//     3.58165890217718337E-03, \
//     3.58165890217718337E-03, \
//     3.58165890217718337E-03, \
//     3.58165890217718337E-03, \
//     3.58165890217718337E-03, \
//     3.58165890217718337E-03  \
//     };
/*------------   END: Auto Generate ------------*/
    // set basis function values to the correct mesh entity
    Func_f_Value = &Value_p1; // point to the correct mesh entity

/*------------ BEGIN: Auto Generate ------------*/
    /*** compute basis function quantities ***/
    // map hessian from local to global coordinates (indexing is in the C style)
    // loop through quad points
    for (int qp_i = 0; (qp_i < Num_QP); qp_i++)
        {
        // formula involves factors of the inverse of the jacobian (or metric) of PHI
        for (int basis_i = 0; (basis_i < Num_Basis); basis_i++)
            {
            // compute main part of formula
            MAT_3x3  Temp_MAT;
            Mat_Mat(phi_Hess[qp_i][basis_i], Mesh->Map_PHI_Inv_Grad[0], Temp_MAT);
            Mat_Transpose_Mat(Mesh->Map_PHI_Inv_Grad[0], Temp_MAT, Func_f_Hess[basis_i][qp_i]);
            }
        }
/*------------   END: Auto Generate ------------*/
}
/***************************************************************************************/
/*------------   END: Auto Generate ------------*/

/*------------ BEGIN: Auto Generate ------------*/
/***************************************************************************************/
/* evaluate basis functions (no derivatives!) on the local reference element. */
void SpecificFUNC::Basis_Value_p1(SCALAR BF_V[NB][NQ])
{

/*------------ BEGIN: Auto Generate ------------*/
// Local Element defined on Subdomain: CG, lagrange_deg2_dim3
// the Subdomain             has topological dimension = 3
// the Domain of Integration has topological dimension = 3
// geometric dimension = 3
// Number of Quadrature Points = 10

    // get "Val" of basis functions
    SCALAR phi_Val[NQ][NB];

    phi_Val[0][0].Set_Equal_To(-1.02467102899568077E-01);
    phi_Val[0][1].Set_Equal_To(7.77960739038872778E-02);
    phi_Val[0][2].Set_Equal_To(-1.02467102899568077E-01);
    phi_Val[0][3].Set_Equal_To(-1.02467102899568077E-01);
    phi_Val[0][4].Set_Equal_To(3.27089673528638047E-01);
    phi_Val[0][5].Set_Equal_To(8.27787380696342057E-02);
    phi_Val[0][6].Set_Equal_To(8.27787380696342057E-02);
    phi_Val[0][7].Set_Equal_To(3.27089673528638158E-01);
    phi_Val[0][8].Set_Equal_To(8.27787380696342195E-02);
    phi_Val[0][9].Set_Equal_To(3.27089673528638158E-01);
    phi_Val[1][0].Set_Equal_To(7.77960739038872501E-02);
    phi_Val[1][1].Set_Equal_To(-1.02467102899568077E-01);
    phi_Val[1][2].Set_Equal_To(-1.02467102899568077E-01);
    phi_Val[1][3].Set_Equal_To(-1.02467102899568077E-01);
    phi_Val[1][4].Set_Equal_To(3.27089673528638103E-01);
    phi_Val[1][5].Set_Equal_To(3.27089673528638103E-01);
    phi_Val[1][6].Set_Equal_To(3.27089673528638103E-01);
    phi_Val[1][7].Set_Equal_To(8.27787380696342195E-02);
    phi_Val[1][8].Set_Equal_To(8.27787380696342195E-02);
    phi_Val[1][9].Set_Equal_To(8.27787380696342195E-02);
    phi_Val[2][0].Set_Equal_To(-1.02467102899568077E-01);
    phi_Val[2][1].Set_Equal_To(-1.02467102899568077E-01);
    phi_Val[2][2].Set_Equal_To(-1.02467102899568077E-01);
    phi_Val[2][3].Set_Equal_To(7.77960739038872778E-02);
    phi_Val[2][4].Set_Equal_To(8.27787380696342057E-02);
    phi_Val[2][5].Set_Equal_To(8.27787380696342057E-02);
    phi_Val[2][6].Set_Equal_To(3.27089673528638047E-01);
    phi_Val[2][7].Set_Equal_To(8.27787380696342195E-02);
    phi_Val[2][8].Set_Equal_To(3.27089673528638158E-01);
    phi_Val[2][9].Set_Equal_To(3.27089673528638158E-01);
    phi_Val[3][0].Set_Equal_To(-1.02467102899568077E-01);
    phi_Val[3][1].Set_Equal_To(-1.02467102899568077E-01);
    phi_Val[3][2].Set_Equal_To(7.77960739038872778E-02);
    phi_Val[3][3].Set_Equal_To(-1.02467102899568077E-01);
    phi_Val[3][4].Set_Equal_To(8.27787380696342057E-02);
    phi_Val[3][5].Set_Equal_To(3.27089673528638047E-01);
    phi_Val[3][6].Set_Equal_To(8.27787380696342057E-02);
    phi_Val[3][7].Set_Equal_To(3.27089673528638158E-01);
    phi_Val[3][8].Set_Equal_To(3.27089673528638158E-01);
    phi_Val[3][9].Set_Equal_To(8.27787380696342195E-02);
    phi_Val[4][0].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[4][1].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[4][2].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[4][3].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[4][4].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[4][5].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[4][6].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[4][7].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[4][8].Set_Equal_To(1.00000000000000000E+00);
    phi_Val[4][9].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[5][0].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[5][1].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[5][2].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[5][3].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[5][4].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[5][5].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[5][6].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[5][7].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[5][8].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[5][9].Set_Equal_To(1.00000000000000000E+00);
    phi_Val[6][0].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[6][1].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[6][2].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[6][3].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[6][4].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[6][5].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[6][6].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[6][7].Set_Equal_To(1.00000000000000000E+00);
    phi_Val[6][8].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[6][9].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[7][0].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[7][1].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[7][2].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[7][3].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[7][4].Set_Equal_To(1.00000000000000000E+00);
    phi_Val[7][5].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[7][6].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[7][7].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[7][8].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[7][9].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[8][0].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[8][1].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[8][2].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[8][3].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[8][4].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[8][5].Set_Equal_To(1.00000000000000000E+00);
    phi_Val[8][6].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[8][7].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[8][8].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[8][9].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[9][0].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[9][1].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[9][2].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[9][3].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[9][4].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[9][5].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[9][6].Set_Equal_To(1.00000000000000000E+00);
    phi_Val[9][7].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[9][8].Set_Equal_To(0.00000000000000000E+00);
    phi_Val[9][9].Set_Equal_To(0.00000000000000000E+00);


// // set of quadrature points
// static const double Quad_Points[NQ][SUB_TD] = { \
//     {5.68430584196844446E-01, 1.43856471934385194E-01, 1.43856471934385194E-01}, \
//     {1.43856471934385194E-01, 1.43856471934385194E-01, 1.43856471934385194E-01}, \
//     {1.43856471934385194E-01, 1.43856471934385194E-01, 5.68430584196844446E-01}, \
//     {1.43856471934385194E-01, 5.68430584196844446E-01, 1.43856471934385194E-01}, \
//     {0.00000000000000000E+00, 5.00000000000000000E-01, 5.00000000000000000E-01}, \
//     {5.00000000000000000E-01, 0.00000000000000000E+00, 5.00000000000000000E-01}, \
//     {5.00000000000000000E-01, 5.00000000000000000E-01, 0.00000000000000000E+00}, \
//     {5.00000000000000000E-01, 0.00000000000000000E+00, 0.00000000000000000E+00}, \
//     {0.00000000000000000E+00, 5.00000000000000000E-01, 0.00000000000000000E+00}, \
//     {0.00000000000000000E+00, 0.00000000000000000E+00, 5.00000000000000000E-01}  \
//     };

// // set of quadrature weights
// static const double Quad_Weights[NQ] = { \
//     3.62941783134008988E-02, \
//     3.62941783134008988E-02, \
//     3.62941783134008988E-02, \
//     3.62941783134008988E-02, \
//     3.58165890217718337E-03, \
//     3.58165890217718337E-03, \
//     3.58165890217718337E-03, \
//     3.58165890217718337E-03, \
//     3.58165890217718337E-03, \
//     3.58165890217718337E-03  \
//     };
/*------------   END: Auto Generate ------------*/
    // copy function evaluations over (indexing is in the C style)
    // loop through quad points
    for (int qp_i = 0; (qp_i < Num_QP); qp_i++)
        {
        // evaluate for each basis function
        for (int basis_i = 0; (basis_i < Num_Basis); basis_i++)
            {
            BF_V[basis_i][qp_i].a = phi_Val[qp_i][basis_i].a;
            }
        }
}
/***************************************************************************************/
/*------------   END: Auto Generate ------------*/

// remove those macros!
#undef SpecificFUNC
#undef SpecificFUNC_str

#undef SPACE_type
#undef SPACE_name
#undef SUB_TD
#undef DOI_TD
#undef GD
#undef NC
#undef NB
#undef NQ

/***/
